import { Ticker } from '@smoovy/ticker';
import { EasingImplementation } from './easing';
export interface TweenTarget {
    [key: string]: number | any;
}
export interface TweenCallbacks<V> {
    stop: () => void;
    pause: () => void;
    start: () => void;
    reset: () => void;
    delay: (passed: number) => void;
    update: (values: V, progress: number) => void;
    overwrite: () => void;
    complete: () => void;
}
export interface TweenOptions<V> {
    easing: EasingImplementation;
    delay: number;
    duration: number;
    mutate: boolean;
    paused: boolean;
    overwrite: boolean;
    on: Partial<TweenCallbacks<V>>;
}
export declare class Tween<T extends TweenTarget = any> {
    target: T;
    values: Partial<T>;
    protected options: Partial<TweenOptions<T>>;
    static ticker: Ticker;
    private static registry;
    private registry;
    private ticker;
    private thread?;
    private delay?;
    private changes;
    private stableTarget;
    private currentTarget;
    private firstTick;
    private _paused;
    private _complete;
    private _passed;
    constructor(target: T, values: Partial<T>, options: Partial<TweenOptions<T>>);
    static fromTo<T extends TweenTarget>(fromTarget: T, toValues: Partial<T>, options?: Partial<TweenOptions<T>>): Tween<T>;
    readonly easing: (t: number, b: number, c: number, d: number, s?: number | undefined) => number;
    readonly duration: number;
    readonly paused: boolean;
    readonly complete: boolean;
    passed: number;
    progress: number;
    private runCallback;
    private createDelay;
    private overwriteTarget;
    private createThread;
    private handleTick;
    private processChanges;
    stop(): this;
    start(): this;
    pause(): this;
    reset(): this;
}
