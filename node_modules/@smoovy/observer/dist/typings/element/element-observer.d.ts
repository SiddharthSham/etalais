import { ElementState } from './element-state';
export interface ElementObserverMutator {
    target?: HTMLElement;
    options?: MutationObserverInit;
}
export interface ElementObserverConfig {
    mutationThrottle?: number;
    viewportThrottle?: number;
    mutators?: ElementObserverMutator[];
}
export declare const elementObserverDefaultConfig: ElementObserverConfig;
export declare class ElementObserver {
    private config;
    static default: ElementObserver;
    private lastRaf;
    private attached;
    private viewportObserver?;
    private mutationObserver?;
    private states;
    constructor(config?: ElementObserverConfig);
    static observe(element: HTMLElement | ElementState): ElementState<HTMLElement>;
    static reset(): void;
    observe(element: HTMLElement | ElementState): ElementState<HTMLElement>;
    private register;
    private deregister;
    reset(): void;
    updateRaf(): void;
    update(async?: boolean): void;
    private attach;
    private detach;
    private checkStates;
}
