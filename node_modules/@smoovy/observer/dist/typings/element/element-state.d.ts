import { Coordinate, Size } from '@smoovy/utils';
export declare type StateChangeListener = (size: Size, offset: Coordinate) => void;
export declare type StateDestroyListener = () => void;
export interface StateChangeListenerRef {
    remove: () => void;
}
export declare class ElementState<T extends HTMLElement = HTMLElement> {
    size: Size;
    offset: Coordinate;
    element: T;
    private _destroyed;
    private changeListeners;
    private destroyListeners;
    private lastSum;
    constructor(element: T | ElementState);
    update(async?: boolean, force?: boolean): void;
    onDestroy(listener: StateDestroyListener): void;
    private updateDimensions;
    private emitChanges;
    private removeListener;
    destroy(): void;
    readonly destroyed: boolean;
    changed(listener: StateChangeListener, throttleTime?: number): StateChangeListenerRef;
    updateSize(): void;
    updateOffset(): void;
    hasChanged(): boolean;
    inViewport(scrollPosition: Coordinate, viewportSize: Size, padding?: Coordinate): {
        inside: boolean;
        above: boolean;
        below: boolean;
        left: boolean;
        right: boolean;
    };
}
