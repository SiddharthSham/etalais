"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var utils=require("@smoovy/utils");class ElementState{constructor(t){this.size={width:0,height:0},this.offset={x:0,y:0},this._destroyed=!1,this.changeListeners=[],this.destroyListeners=[],this.lastSum=0,this.element=t instanceof ElementState?t.element:t}update(t=!1,e=!1){t?setTimeout(()=>this.updateDimensions(e)):this.updateDimensions(e)}onDestroy(t){this.destroyListeners.push(t)}updateDimensions(t){this.updateSize(),this.updateOffset(),(this.hasChanged()||t)&&this.emitChanges()}emitChanges(){for(let t=0,e=this.changeListeners.length;t<e;t++)this.changeListeners[t].call(this,this.size,this.offset)}removeListener(t){this.changeListeners=this.changeListeners.filter(e=>e!==t)}destroy(){this._destroyed=!0;for(let t=0,e=this.destroyListeners.length;t<e;t++)this.destroyListeners[t].call(this);this.changeListeners=[],this.destroyListeners=[]}get destroyed(){return this._destroyed}changed(t,e=0){return e>0&&(t=utils.throttle(t,e)),this.changeListeners.push(t),{remove:()=>this.removeListener(t)}}updateSize(){if(utils.Browser.client){const t=this.element.getBoundingClientRect();this.size.width=t.width,this.size.height=t.height}else this.size.width=0,this.size.height=0}updateOffset(){if(utils.Browser.client){const t=utils.getElementOffset(this.element);this.offset.x=t.x,this.offset.y=t.y}else this.offset.x=0,this.offset.y=0}hasChanged(){const t=this.offset.x+this.offset.y+this.size.width+this.size.height,e=t!==this.lastSum;return this.lastSum=t,e}inViewport(t,e,s={x:0,y:0}){const i=Object.assign({},this.offset),r={above:i.y+s.y+this.size.height<t.y,below:i.y-s.y>t.y+e.height,left:i.x+s.x+this.size.width<t.x,right:i.x-s.x>t.x+e.width};return Object.assign(Object.assign({},r),{inside:!(r.above||r.below||r.right||r.left)})}}class ViewportObserver{static changed(t,e=0){return e>0&&(t=utils.throttle(t,e)),this.listeners.push(t),this.checkListeners(),{remove:()=>this.removeListener(t)}}static removeListener(t){const e=this.listeners.indexOf(t);e>-1&&(this.listeners.splice(e,1),this.checkListeners())}static checkListeners(){this.listening=this.listeners.length>0}static set listening(t){t&&!this._listening?this.attach():!t&&this._listening&&this.detach(),this._listening=t}static get attached(){return this._listening}static get state(){return this.stateResolver.promise}static update(t=!1,e=!1){utils.Browser.client&&(this._state.width=window.innerWidth,this._state.height=window.innerHeight),this.stateResolver.completed||this.stateResolver.resolve(this._state),e||this.handleResize(t)}static getStateSum(){return this._state.width+this._state.height}static handleResize(t=!1){cancelAnimationFrame(this.lastRafId);const e=this.getStateSum();this.lastRafId=requestAnimationFrame(()=>{if(this.update(),e!==this.getStateSum()||!0===t)for(let t=0,e=this.listeners.length;t<e;t++)this.listeners[t].call(this,this._state)})}static attach(){this.resizeListener||(this.handleResize(),this.resizeListener=(()=>this.handleResize()),utils.Browser.client&&window.addEventListener("resize",this.resizeListener,!0))}static detach(){this.resizeListener&&(utils.Browser.client&&window.removeEventListener("resize",this.resizeListener,!0),this.resizeListener=void 0)}}ViewportObserver._listening=!1,ViewportObserver._state={width:0,height:0},ViewportObserver.lastRafId=-1,ViewportObserver.listeners=[],ViewportObserver.stateResolver=new utils.Resolver;const elementObserverDefaultConfig={mutationThrottle:100,viewportThrottle:100,mutators:[{target:utils.Browser.client?document.documentElement:void 0,options:{characterData:!0,childList:!0,subtree:!0}}]};class ElementObserver{constructor(t={}){this.config=t,this.attached=!1,this.states=[]}static observe(t){return this.default.observe(t)}static reset(){return this.default.reset()}observe(t){for(let e=0,s=this.states.length;e<s;e++)if(this.states[e]===t||this.states[e].element===t)return this.states[e];return this.register(t instanceof ElementState?t:new ElementState(t))}register(t){return this.states.push(t),this.checkStates(),t.update(!0),t.onDestroy(()=>this.deregister(t)),t}deregister(t){const e=this.states.indexOf(t);e>-1&&(this.states.splice(e,1),this.checkStates())}reset(){this.states.forEach(t=>this.deregister(t))}updateRaf(){utils.Browser.client?(cancelAnimationFrame(this.lastRaf),this.lastRaf=requestAnimationFrame(()=>this.update())):this.update()}update(t=!1){for(let e=0,s=this.states.length;e<s;e++)this.states[e].update(t)}attach(){if(this.attached=!0,this.viewportObserver=ViewportObserver.changed("number"==typeof this.config.viewportThrottle?utils.throttle(()=>this.update(),this.config.viewportThrottle):()=>this.update()),utils.Browser.client&&utils.Browser.mutationObserver&&this.config.mutators){const t=this.config.mutationThrottle;this.mutationObserver=new MutationObserver("number"==typeof t?utils.throttle(()=>this.updateRaf(),t):()=>this.updateRaf()),this.config.mutators.forEach(t=>{t.target&&this.mutationObserver&&this.mutationObserver.observe(t.target,Object.assign({},t.options))})}let t;utils.Browser.client&&document.addEventListener("DOMContentLoaded",t=(()=>{this.updateRaf(),document.removeEventListener("DOMContentLoaded",t)}),!1),this.updateRaf()}detach(){this.attached=!1,this.viewportObserver&&(this.viewportObserver.remove(),this.viewportObserver=void 0),this.mutationObserver&&(this.mutationObserver.disconnect(),this.mutationObserver=void 0)}checkStates(){this.states.length>0&&!this.attached&&this.attach(),0===this.states.length&&this.attached&&this.detach()}}ElementObserver.default=new ElementObserver(elementObserverDefaultConfig),exports.ElementObserver=ElementObserver,exports.ElementState=ElementState,exports.ViewportObserver=ViewportObserver,exports.elementObserverDefaultConfig=elementObserverDefaultConfig;
//# sourceMappingURL=index.js.map
