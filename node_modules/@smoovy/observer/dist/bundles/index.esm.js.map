{"version":3,"file":"index.esm.js","sources":["../../src/element/element-state.ts","../../src/viewport-observer.ts","../../src/element/element-observer.ts"],"sourcesContent":["import {\n  Browser, Coordinate, getElementOffset, Size, throttle,\n} from '@smoovy/utils';\n\nexport type StateChangeListener = (size: Size, offset: Coordinate) => void;\nexport type StateDestroyListener = () => void;\nexport interface StateChangeListenerRef {\n  remove: () => void;\n}\n\nexport class ElementState<T extends HTMLElement = HTMLElement> {\n  public size: Size = { width: 0, height: 0 };\n  public offset: Coordinate = { x: 0, y: 0 };\n  public element: T;\n  private _destroyed = false;\n  private changeListeners: StateChangeListener[] = [];\n  private destroyListeners: StateDestroyListener[] = [];\n  private lastSum = 0;\n\n  public constructor(element: T | ElementState) {\n    if (element instanceof ElementState) {\n      this.element = element.element as T;\n    } else {\n      this.element = element;\n    }\n  }\n\n  public update(\n    async = false,\n    force = false\n  ) {\n    if (async) {\n      setTimeout(() => this.updateDimensions(force));\n    } else {\n      this.updateDimensions(force);\n    }\n  }\n\n  public onDestroy(listener: StateDestroyListener) {\n    this.destroyListeners.push(listener);\n  }\n\n  private updateDimensions(force?: boolean) {\n    this.updateSize();\n    this.updateOffset();\n\n    if (this.hasChanged() || force) {\n      this.emitChanges();\n    }\n  }\n\n  private emitChanges() {\n    for (let i = 0, len = this.changeListeners.length; i < len; i++) {\n      this.changeListeners[i].call(this, this.size, this.offset);\n    }\n  }\n\n  private removeListener(listener: StateChangeListener) {\n    this.changeListeners = this.changeListeners.filter(item => {\n      return item !== listener;\n    });\n  }\n\n  public destroy() {\n    this._destroyed = true;\n\n    for (let i = 0, len = this.destroyListeners.length; i < len; i++) {\n      this.destroyListeners[i].call(this);\n    }\n\n    this.changeListeners = [];\n    this.destroyListeners = [];\n  }\n\n  public get destroyed() {\n    return this._destroyed;\n  }\n\n  public changed(\n    listener: StateChangeListener,\n    throttleTime: number = 0\n  ) {\n    if (throttleTime > 0) {\n      listener = throttle(listener, throttleTime);\n    }\n\n    this.changeListeners.push(listener);\n\n    const ref: StateChangeListenerRef = {\n      remove: () => this.removeListener(listener)\n    };\n\n    return ref;\n  }\n\n  public updateSize() {\n    /* istanbul ignore else */\n    if (Browser.client) {\n      const bounds = this.element.getBoundingClientRect();\n\n      this.size.width = bounds.width;\n      this.size.height = bounds.height;\n    } else {\n      this.size.width = 0;\n      this.size.height = 0;\n    }\n  }\n\n  public updateOffset() {\n    /* istanbul ignore else */\n    if (Browser.client) {\n      const offset = getElementOffset(this.element);\n\n      this.offset.x = offset.x;\n      this.offset.y = offset.y;\n    } else {\n      this.offset.x = 0;\n      this.offset.y = 0;\n    }\n  }\n\n  public hasChanged() {\n    const sum = (\n      this.offset.x + this.offset.y +\n      this.size.width + this.size.height\n    );\n\n    const changed = sum !== this.lastSum;\n\n    this.lastSum = sum;\n\n    return changed;\n  }\n\n  public inViewport(\n    scrollPosition: Coordinate,\n    viewportSize: Size,\n    padding: Coordinate = { x: 0, y: 0 }\n  ) {\n    const offset = {  ...this.offset };\n    const prepos = {\n      above: offset.y + padding.y + this.size.height < scrollPosition.y,\n      below: offset.y - padding.y > scrollPosition.y + viewportSize.height,\n      left: offset.x + padding.x + this.size.width < scrollPosition.x,\n      right: offset.x - padding.x > scrollPosition.x + viewportSize.width,\n    };\n\n    return {\n      ...prepos,\n      inside: !prepos.above && !prepos.below && !prepos.right && !prepos.left\n    };\n  }\n}\n","import { throttle, Resolver, Browser } from '@smoovy/utils';\n\nexport type ViewportChangeListener = (state: ViewportState) => void;\n\nexport interface ViewportState {\n  width: number;\n  height: number;\n}\n\nexport interface ViewportObservable {\n  remove: () => void;\n}\n\nexport class ViewportObserver {\n  private static _listening = false;\n  private static _state: ViewportState = { width: 0, height: 0 };\n  private static lastRafId: number = -1;\n  private static resizeListener?: EventListenerOrEventListenerObject;\n  private static listeners: ViewportChangeListener[] = [];\n  private static stateResolver = new Resolver<ViewportState>();\n\n  public static changed(\n    listener: ViewportChangeListener,\n    throttleTime: number = 0\n  ): ViewportObservable {\n    if (throttleTime > 0) {\n      listener = throttle(listener, throttleTime);\n    }\n\n    this.listeners.push(listener);\n    this.checkListeners();\n\n    return {\n      remove: () => this.removeListener(listener),\n    };\n  }\n\n  private static removeListener(listener: ViewportChangeListener) {\n    const index = this.listeners.indexOf(listener);\n\n    /* istanbul ignore else */\n    if (index > -1) {\n      this.listeners.splice(index, 1);\n      this.checkListeners();\n    }\n  }\n\n  private static checkListeners() {\n    this.listening = this.listeners.length > 0;\n  }\n\n  private static set listening(listening: boolean) {\n    /* istanbul ignore else */\n    if (listening && ! this._listening) {\n      this.attach();\n    } else if ( ! listening && this._listening) {\n      this.detach();\n    }\n\n    this._listening = listening;\n  }\n\n  public static get attached() {\n    return this._listening;\n  }\n\n  public static get state() {\n    return this.stateResolver.promise;\n  }\n\n  public static update(\n    force = false,\n    silent = false\n  ) {\n    /* istanbul ignore else */\n    if (Browser.client) {\n      this._state.width = window.innerWidth;\n      this._state.height = window.innerHeight;\n    }\n\n    if ( ! this.stateResolver.completed) {\n      this.stateResolver.resolve(this._state);\n    }\n\n    if ( ! silent) {\n      this.handleResize(force);\n    }\n  }\n\n  private static getStateSum() {\n    return this._state.width + this._state.height;\n  }\n\n  private static handleResize(force = false)  {\n    cancelAnimationFrame(this.lastRafId);\n\n    const prevSum = this.getStateSum();\n\n    this.lastRafId = requestAnimationFrame(() => {\n      this.update();\n\n      if (prevSum !== this.getStateSum() || true === force) {\n        for (let i = 0, len = this.listeners.length; i < len; i++) {\n          this.listeners[i].call(this, this._state);\n        }\n      }\n    });\n  }\n\n  private static attach() {\n    /* istanbul ignore else */\n    if ( ! this.resizeListener) {\n      this.handleResize();\n\n      /* istanbul ignore next */\n      this.resizeListener = () => this.handleResize();\n\n      /* istanbul ignore else */\n      if (Browser.client) {\n        window.addEventListener('resize', this.resizeListener, true);\n      }\n    }\n  }\n\n  private static detach() {\n    /* istanbul ignore else */\n    if (this.resizeListener) {\n      /* istanbul ignore else */\n      if (Browser.client) {\n        window.removeEventListener('resize', this.resizeListener, true);\n      }\n\n      this.resizeListener = undefined;\n    }\n  }\n}\n","import { Browser, throttle } from '@smoovy/utils';\n\nimport { ViewportObservable, ViewportObserver } from '../viewport-observer';\nimport { ElementState } from './element-state';\n\nexport interface ElementObserverMutator {\n  target?: HTMLElement;\n  options?: MutationObserverInit;\n}\n\nexport interface ElementObserverConfig {\n  mutationThrottle?: number;\n  viewportThrottle?: number;\n  mutators?: ElementObserverMutator[];\n}\n\n/* istanbul ignore next */\nexport const elementObserverDefaultConfig: ElementObserverConfig = {\n  mutationThrottle: 100,\n  viewportThrottle: 100,\n  mutators: [\n    {\n      target: Browser.client ? document.documentElement : undefined,\n      options: {\n        characterData: true,\n        childList: true,\n        subtree: true\n      }\n    }\n  ]\n};\n\nexport class ElementObserver {\n  public static default = new ElementObserver(elementObserverDefaultConfig);\n  private lastRaf: number;\n  private attached = false;\n  private viewportObserver?: ViewportObservable;\n  private mutationObserver?: MutationObserver;\n  private states: ElementState[] = [];\n\n  public constructor(\n    private config: ElementObserverConfig = {}\n  ) {}\n\n  public static observe(element: HTMLElement | ElementState) {\n    return this.default.observe(element);\n  }\n\n  public static reset() {\n    return this.default.reset();\n  }\n\n  public observe(element: HTMLElement | ElementState) {\n    for (let i = 0, len = this.states.length; i < len; i++) {\n      /* istanbul ignore else */\n      if (this.states[i] === element || this.states[i].element === element) {\n        return this.states[i];\n      }\n    }\n\n    return this.register(\n      element instanceof ElementState ? element : new ElementState(element)\n    );\n  }\n\n  private register(state: ElementState) {\n    this.states.push(state);\n    this.checkStates();\n\n    state.update(true);\n    state.onDestroy(() => this.deregister(state));\n\n    return state;\n  }\n\n  private deregister(state: ElementState) {\n    const index = this.states.indexOf(state);\n\n    /* istanbul ignore else */\n    if (index > -1) {\n      this.states.splice(index, 1);\n      this.checkStates();\n    }\n  }\n\n  public reset() {\n    this.states.forEach(state => this.deregister(state));\n  }\n\n  public updateRaf() {\n    /* istanbul ignore else */\n    if (Browser.client) {\n      cancelAnimationFrame(this.lastRaf);\n\n      this.lastRaf = requestAnimationFrame(() => this.update());\n    } else {\n      this.update();\n    }\n  }\n\n  public update(async = false) {\n    for (let i = 0, len = this.states.length; i < len; i++) {\n      this.states[i].update(async);\n    }\n  }\n\n  private attach() {\n    this.attached = true;\n    this.viewportObserver = ViewportObserver.changed(\n      /* istanbul ignore next */\n      typeof this.config.viewportThrottle === 'number'\n        ? throttle(() => this.update(), this.config.viewportThrottle)\n        : () => this.update()\n    );\n\n    /* istanbul ignore next */\n    if (Browser.client && Browser.mutationObserver && this.config.mutators) {\n      const throttleMs = this.config.mutationThrottle;\n\n      this.mutationObserver = new MutationObserver(\n        typeof throttleMs === 'number'\n          ? throttle(() => this.updateRaf(), throttleMs)\n          : () => this.updateRaf()\n      );\n\n      this.config.mutators.forEach(config => {\n        if (config.target && this.mutationObserver) {\n          this.mutationObserver.observe(config.target, { ...config.options  });\n        }\n      });\n    }\n\n    let domContentLoadedListener: EventListenerOrEventListenerObject;\n\n    /* istanbul ignore next */\n    if (Browser.client) {\n      document.addEventListener(\n        'DOMContentLoaded',\n        domContentLoadedListener = () => {\n          this.updateRaf();\n\n          document.removeEventListener(\n            'DOMContentLoaded',\n            domContentLoadedListener\n          );\n        },\n        false\n      );\n    }\n\n    this.updateRaf();\n  }\n\n  private detach() {\n    this.attached = false;\n\n    /* istanbul ignore next */\n    if (this.viewportObserver) {\n      this.viewportObserver.remove();\n      this.viewportObserver = undefined;\n    }\n\n    /* istanbul ignore next */\n    if (this.mutationObserver) {\n      this.mutationObserver.disconnect();\n      this.mutationObserver = undefined;\n    }\n  }\n\n  private checkStates() {\n    if (this.states.length > 0 && ! this.attached) {\n      this.attach();\n    }\n\n    if (this.states.length === 0 && this.attached) {\n      this.detach();\n    }\n  }\n}\n"],"names":["ElementState","[object Object]","element","this","width","height","x","y","async","force","setTimeout","updateDimensions","listener","destroyListeners","push","updateSize","updateOffset","hasChanged","emitChanges","i","len","changeListeners","length","call","size","offset","filter","item","_destroyed","destroyed","throttleTime","throttle","remove","removeListener","Browser","client","bounds","getBoundingClientRect","getElementOffset","sum","changed","lastSum","scrollPosition","viewportSize","padding","prepos","above","below","left","right","inside","ViewportObserver","listeners","checkListeners","index","indexOf","splice","listening","_listening","attach","detach","attached","state","stateResolver","promise","silent","_state","window","innerWidth","innerHeight","completed","resolve","handleResize","cancelAnimationFrame","lastRafId","prevSum","getStateSum","requestAnimationFrame","update","resizeListener","addEventListener","removeEventListener","undefined","Resolver","elementObserverDefaultConfig","mutationThrottle","viewportThrottle","mutators","target","document","documentElement","options","characterData","childList","subtree","ElementObserver","config","default","observe","reset","states","register","checkStates","onDestroy","deregister","forEach","lastRaf","viewportObserver","mutationObserver","throttleMs","MutationObserver","updateRaf","domContentLoadedListener","disconnect"],"mappings":"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"}