{"version":3,"file":"index.umd.js","sources":["../../src/index.ts"],"sourcesContent":["type TickerUpdateCallback = (\n  delta: number,\n  time: number,\n  kill: () => void\n) => void;\n\nexport class TickerThread {\n  public dead: boolean = false;\n\n  public constructor(\n    private calllback: TickerUpdateCallback\n  ) {}\n\n  public update(delta: number, time: number) {\n    this.calllback(delta, time, this.kill.bind(this));\n  }\n\n  public kill() {\n    this.dead = true;\n  }\n}\n\nexport class Ticker {\n  public readonly intervalMs = 60 / 1000;\n  public ticking = false;\n  public override = false;\n  private threads: TickerThread[] = [];\n  private lastTime = -1;\n  private minDeltaMs = 0;\n  private maxDeltaMs = 1000 / 10;\n\n  public constructor(minMaxFps?: number | [ number, number ]) {\n    if (minMaxFps instanceof Array && minMaxFps.length === 2) {\n      this.setMinFPS(minMaxFps[0]);\n      this.setMaxFPS(minMaxFps[1]);\n    }\n\n    if (typeof minMaxFps === 'number') {\n      this.setMaxFPS(minMaxFps);\n    }\n  }\n\n  public static requestAnimationFrame(callback: FrameRequestCallback) {\n    return window.requestAnimationFrame\n      ? window.requestAnimationFrame(callback)\n      : /* istanbul ignore next */ window.setTimeout(callback, 1000 / 60);\n  }\n\n  public static now(): number {\n    return (window.performance || /* istanbul ignore next */ Date).now();\n  }\n\n  public setMinFPS(fps: number) {\n    const minFPS = Math.max(Math.min(fps, this.maxFPS), 0);\n\n    return this.maxDeltaMs = 1 / Math.min(minFPS / 1000, this.intervalMs);\n  }\n\n  public get minFPS() {\n    return 1000 / this.maxDeltaMs;\n  }\n\n  public setMaxFPS(fps: number) {\n    if (fps === 0) {\n      return this.minDeltaMs = 0;\n    }\n\n    const maxFPS = Math.max(fps, this.minFPS);\n\n    return this.minDeltaMs = 1 / (maxFPS / 1000);\n  }\n\n  public get maxFPS() {\n    return this.minDeltaMs > 0\n      ? 1000 / this.minDeltaMs\n      : this.intervalMs * 1000;\n  }\n\n  public tick(delta: number, time: number = Ticker.now()) {\n    const deadThreads: Array<TickerThread> = [];\n\n    for (let i = 0, len = this.threads.length; i < len; i++) {\n      const thread = this.threads[i];\n\n      if (thread.dead) {\n        deadThreads.push(thread);\n      } else {\n        thread.update(delta, time);\n      }\n    }\n\n    for (let i = 0, len = deadThreads.length; i < len; i++) {\n      this.buryThread(deadThreads[i]);\n    }\n  }\n\n  public update(time = Ticker.now()) {\n    if (time > this.lastTime) {\n      let deltaMs = time - this.lastTime;\n\n      if (deltaMs > this.maxDeltaMs) {\n        deltaMs = this.maxDeltaMs;\n      }\n\n      if (this.minDeltaMs && deltaMs + 1 < this.minDeltaMs) {\n        return;\n      }\n\n      this.tick(deltaMs * this.intervalMs, time);\n    }\n\n    this.lastTime = time;\n  }\n\n  public animate() {\n    Ticker.requestAnimationFrame((time) => {\n      this.update(time);\n\n      if (this.ticking && ! this.override && this.threads.length > 0) {\n        this.animate();\n      } else {\n        this.ticking = false;\n      }\n    });\n  }\n\n  public kill() {\n    this.threads.forEach((thread) => thread.kill());\n  }\n\n  private buryThread(thread: TickerThread) {\n    this.threads.splice(this.threads.indexOf(thread), 1);\n  }\n\n  public add(callback: TickerUpdateCallback): TickerThread {\n    const thread = new TickerThread(callback);\n\n    this.threads.push(thread);\n\n    if ( ! this.ticking && ! this.override) {\n      this.lastTime = Ticker.now();\n      this.ticking = true;\n\n      this.animate();\n    }\n\n    return thread;\n  }\n}\n"],"names":["TickerThread","[object Object]","calllback","this","delta","time","kill","bind","dead","Ticker","minMaxFps","Array","length","setMinFPS","setMaxFPS","callback","window","requestAnimationFrame","setTimeout","performance","Date","now","fps","minFPS","Math","max","min","maxFPS","maxDeltaMs","intervalMs","minDeltaMs","deadThreads","i","len","threads","thread","push","update","buryThread","lastTime","deltaMs","tick","ticking","override","animate","forEach","splice","indexOf"],"mappings":"+MAMaA,EAGXC,YACUC,GAAAC,eAAAD,EAHHC,WAAgB,EAMhBF,OAAOG,EAAeC,GAC3BF,KAAKD,UAAUE,EAAOC,EAAMF,KAAKG,KAAKC,KAAKJ,OAGtCF,OACLE,KAAKK,MAAO,SAIHC,EASXR,YAAmBS,GARHP,gBAAa,IACtBA,cAAU,EACVA,eAAW,EACVA,aAA0B,GAC1BA,eAAY,EACZA,gBAAa,EACbA,gBAAa,IAGfO,aAAqBC,OAA8B,IAArBD,EAAUE,SAC1CT,KAAKU,UAAUH,EAAU,IACzBP,KAAKW,UAAUJ,EAAU,KAGF,iBAAdA,GACTP,KAAKW,UAAUJ,GAIZT,6BAA6Bc,GAClC,OAAOC,OAAOC,sBACVD,OAAOC,sBAAsBF,GACFC,OAAOE,WAAWH,EAAU,IAAO,IAG7Dd,aACL,OAAQe,OAAOG,aAA0CC,MAAMC,MAG1DpB,UAAUqB,GACf,MAAMC,EAASC,KAAKC,IAAID,KAAKE,IAAIJ,EAAKnB,KAAKwB,QAAS,GAEpD,OAAOxB,KAAKyB,WAAa,EAAIJ,KAAKE,IAAIH,EAAS,IAAMpB,KAAK0B,YAG5DN,aACE,OAAO,IAAOpB,KAAKyB,WAGd3B,UAAUqB,GACf,GAAY,IAARA,EACF,OAAOnB,KAAK2B,WAAa,EAG3B,MAAMH,EAASH,KAAKC,IAAIH,EAAKnB,KAAKoB,QAElC,OAAOpB,KAAK2B,WAAa,GAAKH,EAAS,KAGzCA,aACE,OAAOxB,KAAK2B,WAAa,EACrB,IAAO3B,KAAK2B,WACM,IAAlB3B,KAAK0B,WAGJ5B,KAAKG,EAAeC,EAAeI,EAAOY,OAC/C,MAAMU,EAAmC,GAEzC,IAAK,IAAIC,EAAI,EAAGC,EAAM9B,KAAK+B,QAAQtB,OAAQoB,EAAIC,EAAKD,IAAK,CACvD,MAAMG,EAAShC,KAAK+B,QAAQF,GAExBG,EAAO3B,KACTuB,EAAYK,KAAKD,GAEjBA,EAAOE,OAAOjC,EAAOC,GAIzB,IAAK,IAAI2B,EAAI,EAAGC,EAAMF,EAAYnB,OAAQoB,EAAIC,EAAKD,IACjD7B,KAAKmC,WAAWP,EAAYC,IAIzB/B,OAAOI,EAAOI,EAAOY,OAC1B,GAAIhB,EAAOF,KAAKoC,SAAU,CACxB,IAAIC,EAAUnC,EAAOF,KAAKoC,SAM1B,GAJIC,EAAUrC,KAAKyB,aACjBY,EAAUrC,KAAKyB,YAGbzB,KAAK2B,YAAcU,EAAU,EAAIrC,KAAK2B,WACxC,OAGF3B,KAAKsC,KAAKD,EAAUrC,KAAK0B,WAAYxB,GAGvCF,KAAKoC,SAAWlC,EAGXJ,UACLQ,EAAOQ,sBAAuBZ,IAC5BF,KAAKkC,OAAOhC,GAERF,KAAKuC,UAAavC,KAAKwC,UAAYxC,KAAK+B,QAAQtB,OAAS,EAC3DT,KAAKyC,UAELzC,KAAKuC,SAAU,IAKdzC,OACLE,KAAK+B,QAAQW,QAASV,GAAWA,EAAO7B,QAGlCL,WAAWkC,GACjBhC,KAAK+B,QAAQY,OAAO3C,KAAK+B,QAAQa,QAAQZ,GAAS,GAG7ClC,IAAIc,GACT,MAAMoB,EAAS,IAAInC,EAAae,GAWhC,OATAZ,KAAK+B,QAAQE,KAAKD,GAEXhC,KAAKuC,SAAavC,KAAKwC,WAC5BxC,KAAKoC,SAAW9B,EAAOY,MACvBlB,KAAKuC,SAAU,EAEfvC,KAAKyC,WAGAT"}