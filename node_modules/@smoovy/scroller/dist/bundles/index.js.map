{"version":3,"file":"index.js","sources":["../../src/dom.ts","../../src/core.ts","../../src/behaviors/bypassFocus.ts","../../src/utils/keyboard.ts","../../src/behaviors/bypassNative.ts","../../src/behaviors/clampContent.ts","../../src/behaviors/keyboard.ts","../../src/behaviors/lerpContent.ts","../../src/behaviors/mouseWheel.ts","../../src/behaviors/scrollTo.ts","../../src/behaviors/styleContainer.ts","../../src/behaviors/touchInertia.ts","../../src/behaviors/translate.ts","../../src/behaviors/tweenTo.ts","../../src/behaviors/nativeScrollbar.ts","../../src/scroller.ts"],"sourcesContent":["import { EventEmitter } from '@smoovy/event';\nimport {\n  ElementObserver, ElementObserverConfig, ElementState,\n} from '@smoovy/observer';\n\nexport interface ScrollerDomElement {\n  container: HTMLElement | ElementState;\n  wrapper: HTMLElement | ElementState;\n}\n\nexport interface ScrollerDomConfig {\n  observer?: ElementObserverConfig | false;\n  element: HTMLElement | ScrollerDomElement;\n}\n\nexport enum ScrollerDomEvent {\n  RECALC = 'recalc'\n}\n\nexport class ScrollerDom extends EventEmitter {\n  public container: ElementState;\n  public wrapper: ElementState;\n  public observer: ElementObserver;\n  private dynamic = false;\n\n  public constructor(protected config: ScrollerDomConfig) {\n    super();\n\n    this.dynamic = config.element instanceof HTMLElement;\n\n    if (config.observer !== false) {\n      this.observer = new ElementObserver(config.observer);\n    }\n\n    this.container = new ElementState(this.dynamic\n      ? document.createElement('div')\n      : (config.element as ScrollerDomElement).container\n    );\n\n    this.wrapper = new ElementState(this.dynamic\n      ? document.createElement('div')\n      : (config.element as ScrollerDomElement).wrapper\n    );\n\n    if (this.observer) {\n      this.container = this.observer.observe(this.container);\n      this.wrapper = this.observer.observe(this.wrapper);\n\n      this.wrapper.changed(() => this.emit(ScrollerDomEvent.RECALC));\n      this.container.changed(() => this.emit(ScrollerDomEvent.RECALC));\n    }\n\n    if (this.dynamic) {\n      this.container.element.className += 'smoovy-container';\n      this.wrapper.element.className += 'smoovy-wrapper';\n\n      this.container.element.appendChild(this.wrapper.element);\n    }\n  }\n\n  public recalc(async = false) {\n    this.wrapper.update(async);\n    this.container.update(async);\n  }\n\n  public attach() {\n    if (this.dynamic) {\n      const rootElement = this.config.element as HTMLElement;\n      const children = Array.from(rootElement.childNodes);\n\n      rootElement.appendChild(this.container.element);\n      this.wrapper.element.append(...children);\n    }\n  }\n\n  public detach() {\n    if (this.dynamic) {\n      const rootElement = this.config.element as HTMLElement;\n      const children = Array.from(this.wrapper.element.childNodes);\n\n      rootElement.append(...children);\n      rootElement.removeChild(this.container.element);\n    }\n  }\n}\n","import {\n  EventEmitter, EventListenerCb, listenCompose, Unlisten,\n} from '@smoovy/event';\nimport { Ticker } from '@smoovy/ticker';\nimport { TweenOptions } from '@smoovy/tween';\nimport { Coordinate, isNum } from '@smoovy/utils';\n\nimport { ScrollerDom, ScrollerDomConfig, ScrollerDomEvent } from './dom';\n\nexport type ScrollBehavior<C = any> = (config?: C) => ScrollBehaviorItem;\nexport type ScrollBehaviorItemDetach = (() => void)|void;\nexport type ScrollBehaviorItem<S extends Scroller = Scroller> =\n  (scroller: S) => ScrollBehaviorItemDetach;\n\nexport interface ScrollerPosition {\n  virtual: Coordinate;\n  output: Coordinate;\n}\n\nexport type DeltaTransformCallback = (delta: Coordinate) => Coordinate;\nexport type VirtualTransformCallback = (pos: Coordinate) => Coordinate;\nexport interface OutputTransformEvent {\n  pos: Coordinate;\n  step: (pos: Coordinate) => void;\n}\n\nexport interface TweenToEvent {\n  pos: Partial<Coordinate>;\n  options: Partial<\n    Pick<TweenOptions<any>, 'duration' | 'easing'> &\n    { force: boolean }\n  >;\n}\n\nexport interface ScrollToEvent {\n  pos: Partial<Coordinate>;\n  skipOutputTransform: boolean;\n}\n\nexport enum ScrollerEvent {\n  DELTA = 'delta',\n  OUTPUT = 'output',\n  VIRTUAL = 'virtual',\n  RECALC = 'recalc',\n  TWEEN_TO = 'tween_to',\n  SCROLL_TO = 'scroll_to',\n  TRANSFORM_DELTA = '~delta',\n  TRANSFORM_VIRTUAL = '~virtual',\n  TRANSFORM_OUTPUT = '~output'\n}\n\nexport type ScrollerDomType = HTMLElement | ScrollerDomConfig | ScrollerDom;\n\nexport class Scroller extends EventEmitter {\n  private attached = false;\n  private locks: string[] = [];\n  private availableBehaviors = new Map<string, ScrollBehaviorItem>();\n  private attachedBehaviors = new Map<string, ScrollBehaviorItemDetach>();\n  private unlisten: Unlisten;\n  public dom: ScrollerDom;\n  public position: ScrollerPosition = {\n    output: { x: 0, y: 0 },\n    virtual: { x: 0, y: 0 }\n  };\n\n  public constructor(\n    dom: ScrollerDomType,\n    behaviors: { [name: string]: ScrollBehaviorItem }\n  ) {\n    super();\n\n    if (dom instanceof ScrollerDom) {\n      this.dom = dom;\n    } else {\n      this.dom = new ScrollerDom(\n        dom instanceof HTMLElement\n          ? { element: dom }\n          : dom\n      );\n    }\n\n    for (const name in behaviors) {\n      if (behaviors.hasOwnProperty(name)) {\n        this.setBehavior(name, behaviors[name]);\n      }\n    }\n\n    this.attach();\n  }\n\n  private attach() {\n    if ( ! this.attached) {\n      this.attached = true;\n      this.unlisten = listenCompose(\n        this.dom.on<Coordinate>(ScrollerDomEvent.RECALC, () => {\n          this.updateDelta({ x: 0, y: 0 });\n          Ticker.requestAnimationFrame(() => this.emit(ScrollerEvent.RECALC));\n        }),\n        this.on<Coordinate>(ScrollerEvent.DELTA, (delta) => {\n          if ( ! this.isLocked()) {\n            this.updateDelta(delta);\n          }\n        })\n      );\n\n      this.dom.attach();\n      this.availableBehaviors.forEach((_behavior, key) => {\n        this.attachBehavior(key);\n      });\n    }\n  }\n\n  public destroy() {\n    if (this.attached) {\n      this.attached = false;\n\n      if (typeof this.unlisten === 'function') {\n        this.unlisten();\n        delete this.unlisten;\n      }\n\n      this.dom.detach();\n      this.attachedBehaviors.forEach(detach => {\n        if (typeof detach === 'function') {\n          detach.call(this);\n        }\n      });\n    }\n  }\n\n  public recalc(async = false) {\n    this.dom.recalc(async);\n\n    if (async) {\n      Ticker.requestAnimationFrame(() => this.emit(ScrollerEvent.RECALC));\n    } else {\n      this.emit(ScrollerEvent.RECALC);\n    }\n  }\n\n  public get behaviors() {\n    return this.availableBehaviors;\n  }\n\n  public setBehavior(\n    name: string,\n    behavior: ScrollBehaviorItem\n  ) {\n    this.availableBehaviors.set(name, behavior);\n  }\n\n  public deleteBehavior(name: string) {\n    if (this.attachedBehaviors.has(name)) {\n      this.detachBehavior(name);\n    }\n\n    return this.availableBehaviors.delete(name);\n  }\n\n  public attachBehavior(name: string) {\n    const behavior = this.availableBehaviors.get(name);\n\n    if (behavior && ! this.attachedBehaviors.get(name)) {\n      this.attachedBehaviors.set(name, behavior(this));\n\n      return true;\n    }\n\n    return false;\n  }\n\n  public detachBehavior(name: string) {\n    const detach = this.attachedBehaviors.get(name);\n\n    if (detach) {\n      detach.call(this);\n      this.attachedBehaviors.delete(name);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  public updateDelta<T extends Partial<Coordinate>>(delta: T) {\n    const virtPos = this.position.virtual;\n\n    this.emit<T>(\n      ScrollerEvent.TRANSFORM_DELTA,\n      delta,\n      (newDelta) => {\n        delta.x = newDelta.x;\n        delta.y = newDelta.y;\n      }\n    );\n\n    this.updatePosition({\n      x: isNum(delta.x) ? virtPos.x - (delta.x as number) : undefined,\n      y: isNum(delta.y) ? virtPos.y - (delta.y as number) : undefined\n    });\n  }\n\n  protected updatePosition(virtPos?: Partial<Coordinate>) {\n    if (virtPos && isNum(virtPos.x)) {\n      this.position.virtual.x = virtPos.x as number;\n    }\n\n    if (virtPos && isNum(virtPos.y)) {\n      this.position.virtual.y = virtPos.y as number;\n    }\n\n    this.emit(ScrollerEvent.VIRTUAL, this.position.virtual);\n    this.emit<Coordinate>(\n      ScrollerEvent.TRANSFORM_VIRTUAL,\n      this.position.virtual,\n      (newPos) => {\n        this.position.virtual.x = newPos.x;\n        this.position.virtual.y = newPos.y;\n      }\n    );\n\n    if (\n      this.isEventMuted(ScrollerEvent.TRANSFORM_OUTPUT) ||\n      ! this.hasEventListeners(ScrollerEvent.TRANSFORM_OUTPUT)\n    ) {\n      this.updateOutput(this.position.virtual);\n    } else {\n      this.emit<OutputTransformEvent>(\n        ScrollerEvent.TRANSFORM_OUTPUT,\n        {\n          pos: this.position.output,\n          step: (outPos) => this.updateOutput(outPos)\n        }\n      );\n    }\n  }\n\n  protected updateOutput(pos: Coordinate) {\n    this.position.output.x = pos.x;\n    this.position.output.y = pos.y;\n\n    this.emit(ScrollerEvent.OUTPUT, pos);\n  }\n\n  public lock(name = 'default', enable = true) {\n    if ( ! this.locks.includes(name) && enable) {\n      this.locks.push(name);\n    } else if ( ! enable) {\n      this.unlock(name);\n    }\n  }\n\n  public unlock(name = 'default') {\n    const index = this.locks.indexOf(name);\n\n    if (index > -1) {\n      this.locks.splice(index, 1);\n    }\n  }\n\n  public isLocked(name?: string) {\n    if (name) {\n      return this.locks.includes(name);\n    }\n\n    return this.locks.length > 0;\n  }\n\n  public scrollTo(\n    pos: Partial<Coordinate>,\n    skipOutputTransform = false\n  ) {\n    this.emit<ScrollToEvent>(\n      ScrollerEvent.SCROLL_TO,\n      { pos, skipOutputTransform }\n    );\n  }\n\n  public tweenTo(\n    pos: Partial<Coordinate>,\n    options: TweenToEvent['options'] = {}\n  ) {\n    this.emit<TweenToEvent>(\n      ScrollerEvent.TWEEN_TO,\n      { pos, options }\n    );\n  }\n\n  public onVirtual(cb: EventListenerCb<Coordinate>) {\n    return this.on(ScrollerEvent.VIRTUAL, cb);\n  }\n\n  public onScroll(cb: EventListenerCb<Coordinate>) {\n    return this.on(ScrollerEvent.OUTPUT, cb);\n  }\n\n  public onDelta(cb: EventListenerCb<Coordinate>) {\n    return this.on(ScrollerEvent.DELTA, cb);\n  }\n}\n","import { listenCompose, listenEl } from '@smoovy/event';\nimport { Ticker } from '@smoovy/ticker';\n\nimport { ScrollBehavior, ScrollerEvent } from '../core';\nimport { Browser } from '@smoovy/utils';\n\ninterface Config {\n  /**\n   * Ignore focused elements within the given elements\n   * Default: []\n   */\n  ignoreInside?: HTMLElement[];\n\n  /**\n   * The target to set the focus listener onto\n   * Default: window\n   */\n  focusTarget?: Window | Document | HTMLElement;\n\n  /**\n   * Use native mode. This will trigger the scroll events on\n   * a defined target instead of the scroller directly\n   */\n  nativeTarget?: Window | HTMLElement;\n}\n\nconst behavior: ScrollBehavior<Config> = (config = {}) => (scroller) => {\n  const focusTarget = config.focusTarget || Browser.client ? window : undefined;\n  const container = scroller.dom.container.element;\n  const ignoreIn = config.ignoreInside || [];\n  const scrollListener = (event: Event) => {\n    event.preventDefault();\n\n    container.scrollLeft = container.scrollTop = 0;\n  };\n\n  const focusListener = (event: FocusEvent) => {\n    Ticker.requestAnimationFrame(() => {\n      const activeEl = event.target;\n\n      if ( ! (activeEl instanceof HTMLElement)) {\n        return;\n      }\n\n      const ignore = ignoreIn.map(el => el.contains(activeEl)).includes(true);\n\n      if (\n        ! ignore &&\n        activeEl &&\n        container.contains(activeEl)\n        || container === activeEl\n      ) {\n        const bounds = activeEl.getBoundingClientRect();\n        const targetSize = scroller.dom.container.size;\n\n        if (\n          bounds.top <= 0 || bounds.top >= targetSize.height ||\n          bounds.left <= 0 || bounds.right >= targetSize.width\n        ) {\n          if (config.nativeTarget) {\n            const position = scroller.position.virtual;\n\n            config.nativeTarget.scrollTo(\n              position.x + bounds.left - targetSize.width / 2,\n              position.y + bounds.top - targetSize.height / 2\n            );\n          } else {\n            scroller.emit(ScrollerEvent.DELTA, {\n              y: -bounds.top + targetSize.height / 2,\n              x: -bounds.left + targetSize.width / 2\n            });\n          }\n        }\n      }\n    });\n  };\n\n  return listenCompose(\n    listenEl(container, 'scroll', scrollListener),\n    focusTarget\n      ? listenEl(focusTarget, 'focus', focusListener, true)\n      : undefined\n  );\n};\n\nexport { Config as BypassFocusConfig };\nexport default behavior;\n","import { Coordinate } from '@smoovy/utils';\n\nexport function getDeltaByKeyEvent(\n  event: KeyboardEvent,\n  arrowDelta = 100,\n  pageDelta = 250,\n  spaceDelta = 200,\n  homeEndDelta = Infinity\n) {\n  const delta: Coordinate = { x: 0, y: 0 };\n\n  switch (event.key) {\n    case ' ':\n      delta.y = -spaceDelta;\n      break;\n\n    case 'ArrowLeft':\n      delta.x = arrowDelta;\n      break;\n\n    case 'ArrowRight':\n      delta.x = -arrowDelta;\n      break;\n\n    case 'ArrowDown':\n      delta.y = -arrowDelta;\n      break;\n\n    case 'ArrowUp':\n      delta.y = arrowDelta;\n      break;\n\n    case 'PageDown':\n      delta.y = -pageDelta;\n      break;\n\n    case 'PageUp':\n      delta.y = pageDelta;\n      break;\n\n    case 'Home':\n      delta.y = homeEndDelta;\n      break;\n\n    case 'End':\n      delta.y = -homeEndDelta;\n      break;\n  }\n\n  return delta;\n}\n","import { listenCompose, listenEl, Unlisten } from '@smoovy/event';\nimport { Ticker } from '@smoovy/ticker';\nimport { Tween } from '@smoovy/tween';\nimport { isNum } from '@smoovy/utils';\n\nimport {\n  ScrollBehavior, ScrollerEvent, ScrollToEvent, TweenToEvent,\n} from '../core';\nimport { getDeltaByKeyEvent } from '../utils/keyboard';\n\ninterface Config {\n  /**\n   * The target to put all the events on\n   * Default: Window\n   */\n  target?: Window | HTMLElement;\n\n  /**\n   * The condition to dermine whether\n   * the native mode should be active or not\n   * Default: () => false\n   */\n  condition?: () => boolean;\n}\n\nconst defaultConfig = {\n  condition: () => false\n};\n\nconst behavior: ScrollBehavior<Config> = (config = {}) => {\n  const cfg = Object.assign(defaultConfig, config);\n  let self: ReturnType<ScrollBehavior>;\n\n  return self = (scroller) => {\n    const target = cfg.target || window;\n    const detachedBehaviors: string[] = [];\n    let unlisten: Unlisten | undefined;\n\n    const getPos = () => {\n      const x = target === window\n        ? target.scrollX\n        : (target as HTMLElement).scrollLeft;\n\n      const y = target === window\n        ? target.scrollY\n        : (target as HTMLElement).scrollTop;\n\n      return { x, y };\n    };\n\n    const check = () => {\n      if (cfg.condition()) {\n        scroller.behaviors.forEach((b, name) => {\n          if (b !== self) {\n            scroller.detachBehavior(name);\n            detachedBehaviors.push(name);\n          }\n        });\n\n        unlisten = listenCompose(\n          listenEl(target, 'scroll', () => {\n            const pos = getPos();\n\n            scroller.emit(ScrollerEvent.DELTA, {\n              x: scroller.position.virtual.x - pos.x,\n              y: scroller.position.virtual.y - pos.y\n            });\n          }),\n          scroller.on<ScrollToEvent>(ScrollerEvent.SCROLL_TO, ({ pos }) => {\n            if (isNum(pos.x) || isNum(pos.y)) {\n              const defPos = getPos();\n\n              target.scrollTo(\n                isNum(pos.x) ? pos.x as number : defPos.x,\n                isNum(pos.y) ? pos.y as number : defPos.y\n              );\n            }\n          })\n        );\n\n        scroller.on<TweenToEvent>(\n          ScrollerEvent.TWEEN_TO,\n          ({ pos, options }) => {\n            const force = !!options.force;\n            let tween: Tween | undefined;\n            const shallowStop = () => {\n              if (tween && ! force) {\n                tween.stop();\n                tween = undefined;\n              }\n            };\n\n            const unlistenTween = listenCompose(\n              listenEl(window, 'touchstart', shallowStop),\n              listenEl(window, 'wheel', shallowStop),\n              listenEl(window, 'keydown', (event) => {\n                const delta = getDeltaByKeyEvent(event);\n\n                if (event.key === 'Tab' || delta.x !== 0 || delta.y !== 0) {\n                  shallowStop();\n                }\n              })\n            );\n\n            tween = Tween.fromTo(scroller.position.virtual, pos, {\n              mutate: false,\n              duration: options.duration,\n              easing: options.easing,\n              on: {\n                update: (newPos) => window.scrollTo(newPos.x, newPos.y),\n                complete: unlistenTween,\n                stop: unlistenTween\n              }\n            });\n          }\n        );\n      } else if (detachedBehaviors.length > 0) {\n        if (unlisten) {\n          unlisten();\n          unlisten = undefined;\n        }\n\n        detachedBehaviors.forEach(name => scroller.attachBehavior(name));\n        Ticker.requestAnimationFrame(() => scroller.dom.recalc());\n      }\n    };\n\n    setTimeout(() => check());\n    scroller.on(ScrollerEvent.RECALC, () => check());\n  };\n};\n\nexport { Config as BypassNativeConfig };\nexport default behavior;\n","import { clamp, Coordinate } from '@smoovy/utils';\n\nimport { ScrollBehavior, ScrollerEvent } from '../core';\n\nconst behavior: ScrollBehavior = () => (scroller) => {\n  return scroller.on<Coordinate>(\n    ScrollerEvent.TRANSFORM_VIRTUAL,\n    (virtual) => {\n      const wSize = scroller.dom.wrapper.size;\n      const cSize = scroller.dom.container.size;\n      const maxScrollX = Math.max(wSize.width - cSize.width, 0);\n      const maxScrollY = Math.max(wSize.height - cSize.height, 0);\n\n      return {\n        x: clamp(virtual.x, 0, maxScrollX),\n        y: clamp(virtual.y, 0, maxScrollY)\n      };\n    }\n  );\n};\n\nexport default behavior;\n","import { listenEl } from '@smoovy/event';\nimport { Browser } from '@smoovy/utils';\n\nimport { ScrollBehavior, ScrollerEvent } from '../core';\nimport { getDeltaByKeyEvent } from '../utils/keyboard';\n\ninterface Config {\n  /**\n   * A target element on which the event listeners will be placed\n   * Default: `document.documentElement`\n   */\n  target?: HTMLElement;\n\n  /**\n   * Whether passive events are enabled or not.\n   * Default: false\n   */\n  passive?: boolean;\n\n  /**\n   * The keyboard event on which to trigger the emission\n   * Default: keydown\n   */\n  eventName?: keyof HTMLElementEventMap;\n\n  /**\n   * The delta value for the arrow keys\n   * Default: 100\n   */\n  arrowDelta?: number;\n\n  /**\n   * The page up & down delta value\n   * Default: 250\n   */\n  pageDelta?: number;\n\n  /**\n   * The delta value for the space key\n   * Default: 150\n   */\n  spaceDelta?: number;\n\n  /**\n   * The delta value for home and end\n   * Default: Infinity\n   */\n  homeEndDelta?: number;\n}\n\nconst defaultConfig = {\n  passive: false,\n  target: Browser.client ? document.documentElement : undefined,\n  eventName: 'keydown',\n  arrowDelta: 100,\n  pageDelta: 250,\n  spaceDelta: 200,\n  homeEndDelta: Infinity\n};\n\nconst behavior: ScrollBehavior<Config> = (config = {}) => {\n  const cfg = Object.assign(defaultConfig, config);\n\n  return (scroller) => {\n    const target = cfg.target as HTMLElement;\n    const listener = (event: KeyboardEvent) => {\n      const delta = getDeltaByKeyEvent(\n        event,\n        cfg.arrowDelta,\n        cfg.pageDelta,\n        cfg.spaceDelta,\n        cfg.homeEndDelta\n      );\n\n      if (delta.x || delta.y) {\n        scroller.emit(ScrollerEvent.DELTA, delta);\n      }\n    };\n\n    return Browser.wheelEvent\n      ? listenEl(\n          target,\n          cfg.eventName,\n          listener as any,\n          { passive: config.passive }\n        )\n      : undefined;\n  };\n};\n\nexport { Config as KeyboardConfig };\nexport default behavior;\n","import { Ticker, TickerThread } from '@smoovy/ticker';\nimport { Browser, cutDec, lerp } from '@smoovy/utils';\n\nimport { OutputTransformEvent, ScrollBehavior, ScrollerEvent } from '../core';\n\ninterface Config {\n  /**\n   * The damping used for the linear interpolation\n   * The lower this value the smoother the animation\n   * Default: 0.1\n   */\n  damping?: number;\n\n  /**\n   * The damping for mobile (touch) devices\n   * Default: 0.18\n   */\n  mobileDamping?: number;\n\n  /**\n   * The value on which to decide when to stop the lerp calculations\n   * Default: 0.009\n   */\n  precision?: number;\n\n  /**\n   * A custom ticker to use for the animation\n   */\n  ticker?: Ticker;\n}\n\nconst defaultConfig = {\n  damping: 0.1,\n  precision: 0.009,\n  mobileDamping: 0.18,\n};\n\nconst behavior: ScrollBehavior<Config> = (config = {}) => {\n  const cfg = Object.assign(defaultConfig, config);\n\n  return (scroller) => {\n    let thread: TickerThread;\n    const ticker = cfg.ticker || new Ticker();\n    const damping = Browser.mobile ? cfg.mobileDamping : cfg.damping;\n    const unlisten = scroller.on<OutputTransformEvent>(\n      ScrollerEvent.TRANSFORM_OUTPUT,\n      ({ pos, step }) => {\n        if (thread) {\n          thread.kill();\n        }\n\n        thread = ticker.add((_delta, _time, kill) => {\n          const virtual = scroller.position.virtual;\n          const outputX = lerp(pos.x, virtual.x, damping);\n          const outputY = lerp(pos.y, virtual.y, damping);\n          const diffX = Math.abs(virtual.x - outputX);\n          const diffY = Math.abs(virtual.y - outputY);\n\n          if (diffX < cfg.precision && diffY < cfg.precision) {\n            kill();\n          }\n\n          step({ x: outputX, y: outputY });\n        });\n      }\n    );\n\n    return () => {\n      unlisten();\n      ticker.kill();\n    };\n  };\n};\n\nexport { Config as LerpContentConfig };\nexport default behavior;\n","import { listenEl } from '@smoovy/event';\nimport { Browser } from '@smoovy/utils';\n\nimport { ScrollBehavior, ScrollerEvent } from '../core';\n\ninterface Config {\n  /**\n   * A target element on which the event listeners will be placed\n   * Default: `document.documentElement`\n   */\n  target?: HTMLElement;\n\n  /**\n   * Whether passive events are enabled or not.\n   * Default: false\n   */\n  passive?: boolean;\n\n  /**\n   * The multiplier used on the delta value.\n   * Default: 1\n   */\n  multiplier?: number;\n\n  /**\n   * The multiplier used on the delta value for firefox browsers\n   * Default: 25\n   */\n  multiplierFirefox?: number;\n}\n\nconst defaultConfig = {\n  passive: false,\n  multiplier: 1,\n  multiplierFirefox: 25\n};\n\nconst behavior: ScrollBehavior<Config> = (config = {}) => {\n  const cfg = Object.assign(defaultConfig, config);\n\n  return (scroller) => {\n    const target = cfg.target || document.documentElement;\n    const listener = (event: WheelEvent) => {\n      const delta = { x: 0, y: 0 };\n\n      if ( ! config.passive) {\n        event.preventDefault();\n      }\n\n      delta.x = (event as any).wheelDeltaX || event.deltaX * -1;\n      delta.y = (event as any).wheelDeltaY || event.deltaY * -1;\n      delta.x *= cfg.multiplier;\n      delta.y *= cfg.multiplier;\n\n\n      if (Browser.firefox && event.deltaMode === 1) {\n        delta.x *= cfg.multiplierFirefox;\n        delta.y *= cfg.multiplierFirefox;\n      }\n\n      scroller.emit(ScrollerEvent.DELTA, delta);\n    };\n\n    return Browser.wheelEvent\n      ? listenEl(target, 'wheel', listener, { passive: cfg.passive })\n      : undefined;\n  };\n};\n\nexport { Config as MouseWheelConfig };\nexport default behavior;\n","import { Unlisten } from '@smoovy/event';\nimport { Ticker } from '@smoovy/ticker';\nimport { Coordinate } from '@smoovy/utils';\n\nimport {\n  ScrollBehavior as SmoovyScrollBehavior, ScrollerEvent, ScrollToEvent,\n} from '../core';\n\ninterface Config {\n  /**\n   * Use native mode. This will trigger the scroll events on\n   * a defined target instead of the scroller directly\n   */\n  nativeTarget?: Window | HTMLElement;\n\n  /**\n   * The scroll behavior to use for the native target\n   * Default: smooth\n   */\n  nativeBehavior?: ScrollBehavior;\n}\n\nconst behavior: SmoovyScrollBehavior<Config> = (config = {}) => (scroller) => {\n  return scroller.on<ScrollToEvent>(ScrollerEvent.SCROLL_TO, (event) => {\n    let unmute: Unlisten;\n\n    if (event.skipOutputTransform) {\n      unmute = scroller.muteEvents(ScrollerEvent.TRANSFORM_OUTPUT);\n    }\n\n    const virtual = scroller.position.virtual;\n\n    if (config.nativeTarget) {\n      const position: ScrollToOptions = {};\n\n      if (typeof event.pos.x === 'number') {\n        position.left = event.pos.x;\n      }\n\n      if (typeof event.pos.y === 'number') {\n        position.top = event.pos.y;\n      }\n\n      config.nativeTarget.scrollTo({\n        behavior: config.nativeBehavior || 'smooth',\n        ...position\n      });\n    } else {\n      const delta: Partial<Coordinate> = {};\n\n      if (typeof event.pos.x === 'number') {\n        delta.x = -(event.pos.x - virtual.x);\n      }\n\n      if (typeof event.pos.y === 'number') {\n        delta.y = -(event.pos.y - virtual.y);\n      }\n\n      scroller.updateDelta(delta);\n    }\n\n    Ticker.requestAnimationFrame(() => {\n      if (unmute) {\n        unmute();\n      }\n    });\n  });\n};\n\nexport { Config as ScrollToConfig };\nexport default behavior;\n","import { ScrollBehavior } from '../core';\nimport { objectDeepMerge } from '@smoovy/utils';\n\ninterface Config {\n  /**\n   * The default styling of the container element\n   * Default: {\n   *   width: '100%',\n   *   height: '100%',\n   *   overflow: 'hidden'\n   * }\n   */\n  defaults?: Partial<{ [key: string]: string }>;\n}\n\nconst defaultConfig = {\n  defaults: {\n    width: '100%',\n    height: '100%',\n    overflow: 'hidden'\n  }\n};\n\nconst behavior: ScrollBehavior<Config> = (config = {}) => {\n  const cfg = objectDeepMerge(defaultConfig as Config, config);\n\n  return (scroller) => {\n    const target = scroller.dom.container.element;\n\n    for (const x in cfg.defaults) {\n      if (cfg.defaults.hasOwnProperty(x)) {\n        (target.style as any)[x] = cfg.defaults[x];\n      }\n    }\n\n    return () => {\n      for (const x in cfg.defaults) {\n        if (cfg.defaults.hasOwnProperty(x)) {\n          (target.style as any)[x] = '';\n        }\n      }\n    };\n  };\n};\n\nexport { Config as StyleContainerConfig };\nexport default behavior;\n","import { ScrollBehavior, ScrollerEvent } from '../core';\nimport { listenCompose, listenEl } from '@smoovy/event';\nimport { Ticker } from '@smoovy/ticker';\nimport { lerp, between } from '@smoovy/utils';\n\ninterface Config {\n  /**\n   * A target element on which the event listeners will be placed\n   * Default: `document.documentElement`\n   */\n  target?: HTMLElement;\n\n  /**\n   * Whether passive events are enabled or not.\n   * Default: false\n   */\n  passive?: boolean;\n\n  /**\n   * The multiplier used on the delta value\n   * Default: 1\n   */\n  deltaMultiplier?: number;\n\n  /**\n   * The multiplier used on the velocity values.\n   * Default: 20\n   */\n  velocityMultiplier?: number;\n\n  /**\n   * The inertia (damping) applied to the velocity\n   * Default: 0.08\n   */\n  velocityDamping?: number;\n\n  /**\n   * The minimum threshold range to enter before\n   * canceling the velocity to 0 and stopping\n   * the momentum animation\n   * Default: 2\n   */\n  minimumThreshold?: number;\n}\n\nconst defaultConfig = {\n  passive: false,\n  deltaMultiplier: 1,\n  velocityDamping: 0.08,\n  velocityMultiplier: 20,\n  minimumThreshold: 2\n};\n\nconst behavior: ScrollBehavior<Config> = (config = {}) => {\n  const cfg = Object.assign(defaultConfig, config);\n\n  return (scroller) => {\n    const doc = document.documentElement;\n    const target = cfg.target || doc;\n    const ticker = new Ticker();\n    const startPos = { x: 0, y: 0 };\n    const velocity = { x: 0, y: 0 };\n    const threshold = cfg.minimumThreshold;\n    let lastMove = 0;\n    let down = false;\n\n    const getTouch = (event: TouchEvent) => {\n      return (event.targetTouches ? event.targetTouches[0] : event) as Touch;\n    };\n\n    const handleTouchStart = (event: TouchEvent) => {\n      ticker.kill();\n\n      const touch = getTouch(event);\n\n      startPos.x = touch.pageX;\n      startPos.y = touch.pageY;\n\n      down = true;\n    };\n\n    const handleTouchEnd = () => {\n      if (down) {\n        if (velocity.x !== 0 || velocity.y !== 0) {\n          ticker.add((_delta, _time, kill) => {\n            velocity.x = lerp(velocity.x, 0, cfg.velocityDamping);\n            velocity.y = lerp(velocity.y, 0, cfg.velocityDamping);\n\n            scroller.emit(ScrollerEvent.DELTA, velocity);\n\n            if (\n              between(velocity.x, threshold, -threshold) &&\n              between(velocity.y, threshold, -threshold)\n            ) {\n              velocity.x = 0;\n              velocity.y = 0;\n\n              kill();\n            }\n          });\n        }\n      }\n\n      down = false;\n    };\n\n    const handleTouchMove = (event: TouchEvent) => {\n      if (down) {\n        event.preventDefault();\n\n        const delta = { x: 0, y: 0 };\n        const touch = getTouch(event);\n\n        delta.x = (touch.pageX - startPos.x) * cfg.deltaMultiplier;\n        delta.y = (touch.pageY - startPos.y) * cfg.deltaMultiplier;\n\n        const deltaTime = Ticker.now() - lastMove;\n\n        velocity.x = (startPos.x - touch.pageX) / deltaTime;\n        velocity.y = (startPos.y - touch.pageY) / deltaTime;\n        velocity.x *= -1 * cfg.velocityMultiplier;\n        velocity.y *= -1 * cfg.velocityMultiplier;\n\n        startPos.x = touch.pageX;\n        startPos.y = touch.pageY;\n        lastMove = Ticker.now();\n\n        scroller.emit(ScrollerEvent.DELTA, delta);\n      }\n    };\n\n    return listenCompose(\n      listenEl(\n        target,\n        'touchstart',\n        handleTouchStart,\n        { passive: cfg.passive }\n      ),\n      listenEl(doc, 'touchend', handleTouchEnd, { passive: cfg.passive }),\n      listenEl(doc, 'touchmove', handleTouchMove, { passive: cfg.passive }),\n    );\n  };\n};\n\nexport { Config as TouchInertiaConfig };\nexport default behavior;\n","import { Browser, Coordinate, cutDec } from '@smoovy/utils';\n\nimport { ScrollBehavior, ScrollerEvent } from '../core';\n\ninterface Config {\n  /**\n   * Since firefox has a problem with tweening transforms,\n   * this will add a little trick to prevent firefox from\n   * executing flickering animations by adding a 3d rotation\n   * of 0.01deg to the transform property.\n   * Default: true\n   */\n  firefoxFix?: boolean;\n\n  /**\n   * Whether the styles should be set initially\n   * Default: true\n   */\n  initialStyles?: boolean;\n\n  /**\n   * The decimal places to keep\n   * Default: 2\n   */\n  precision?: number;\n}\n\nconst defaultConfig = {\n  firefoxFix: true,\n  initialStyles: true,\n  precision: 2\n};\n\nconst updateTransform = (\n  element: HTMLElement,\n  posX = 0,\n  posY = 0,\n  rotate = false\n) => {\n  let transform = `translate3d(${-posX}px, ${-posY}px, 0)`;\n\n  if (rotate) {\n    transform += ` rotate3d(0.01, 0.01, 0.01, 0.01deg)`;\n  }\n\n  element.style.transform = transform;\n};\n\nconst behavior: ScrollBehavior<Config> = (config = {}) => {\n  const cfg = Object.assign(defaultConfig, config);\n  const firefoxFix = cfg.firefoxFix && Browser.firefox;\n\n  return (scroller) => {\n    const element = scroller.dom.wrapper.element;\n    const unlisten = scroller.on<Coordinate>(\n      ScrollerEvent.OUTPUT,\n      (pos) => {\n        const posX = cutDec(pos.x, cfg.precision);\n        const posY = cutDec(pos.y, cfg.precision);\n\n        updateTransform(element, posX, posY, firefoxFix);\n      }\n    );\n\n    if (cfg.initialStyles) {\n      updateTransform(element, 0, 0, firefoxFix);\n    }\n\n    return () => {\n      element.style.transform = '';\n      unlisten();\n    };\n  };\n};\n\nexport { Config as TranslateConfig };\nexport default behavior;\n","import { listenCompose, listenEl, Unlisten } from '@smoovy/event';\nimport { Tween } from '@smoovy/tween';\n\nimport { ScrollBehavior, ScrollerEvent, TweenToEvent } from '../core';\n\ninterface Config {\n  /**\n   * Use native mode. This will trigger the scroll events on\n   * a defined target instead of the scroller directly\n   */\n  nativeTarget?: Window | HTMLElement;\n\n  /**\n   * Events used to detect changes on the native targets.\n   * Default: [ 'wheel', 'touchmove' ]\n   */\n  nativeKillEvents?: (keyof HTMLElementEventMap)[];\n}\n\nconst behavior: ScrollBehavior<Config> = (config = {}) => (scroller) => {\n  let currentTween: Tween | undefined;\n\n  return scroller.on<TweenToEvent>(\n    ScrollerEvent.TWEEN_TO,\n    ({ pos, options }) => {\n      const force = !!options.force;\n      const unlisten = listenCompose(\n        config.nativeTarget === undefined\n          ? listenCompose(\n              scroller.on(ScrollerEvent.DELTA, () => {\n                if (currentTween && ! force) {\n                  currentTween.stop();\n                }\n              }),\n              scroller.muteEvents(\n                ScrollerEvent.TRANSFORM_OUTPUT,\n                force && ScrollerEvent.DELTA\n              )\n            )\n          : listenEl(\n              config.nativeTarget,\n              config.nativeKillEvents || ['wheel', 'touchmove'],\n              () => {\n                if (currentTween && ! force) {\n                  currentTween.stop();\n                }\n              }\n            )\n      );\n\n      if (currentTween) {\n        currentTween.stop();\n      }\n\n      currentTween = Tween.fromTo(\n        scroller.position.virtual,\n        pos,\n        {\n          mutate: false,\n          duration: options.duration,\n          easing: options.easing,\n          on: {\n            update: (newPos) => {\n              if (config.nativeTarget) {\n                config.nativeTarget.scrollTo(newPos.x, newPos.y);\n              } else {\n                scroller.updateDelta({\n                  x: scroller.position.virtual.x - newPos.x,\n                  y: scroller.position.virtual.y - newPos.y\n                });\n              }\n            },\n            stop: () => {\n              unlisten();\n              currentTween = undefined;\n            },\n            complete: () => {\n              unlisten();\n              currentTween = undefined;\n            }\n          }\n        }\n      );\n    }\n  );\n};\n\nexport { Config as TweenToConfig };\nexport default behavior;\n","import { listenCompose, listenEl } from '@smoovy/event';\nimport { Browser } from '@smoovy/utils';\n\nimport { ScrollBehavior, ScrollerEvent } from '../core';\n\ninterface Config {\n  /**\n   * The target to set the scroll listeners on\n   * Default: window\n   */\n  target?: HTMLElement | Window;\n}\n\nconst defaultConfig = {\n  target: Browser.client ? window : undefined\n};\n\nconst behavior: ScrollBehavior<Config> = (config = {}) => {\n  const cfg = Object.assign(defaultConfig, config);\n\n  return (scroller) => {\n    const contentSpan = document.createElement('div');\n    const parentElement = scroller.dom.container.element.parentElement;\n    const updateSize = () => {\n      contentSpan.style.height = `${scroller.dom.wrapper.size.height}px`;\n    };\n\n    updateSize();\n\n    if (parentElement) {\n      parentElement.append(contentSpan);\n    }\n\n    return listenCompose(\n      () => contentSpan.remove(),\n      cfg.target\n        ? listenEl(cfg.target, 'scroll', () => (\n            scroller.emit(ScrollerEvent.DELTA, {\n              x: scroller.position.virtual.x - window.scrollX,\n              y: scroller.position.virtual.y - window.scrollY\n            }))\n          )\n        : undefined,\n      scroller.on(ScrollerEvent.RECALC, updateSize)\n    );\n  };\n};\n\nexport { Config as NativeScrollbarConfig };\nexport default behavior;\n","import { Browser } from '@smoovy/utils';\n\nimport * as coreBehaviors from './behaviors';\nimport { ScrollBehaviorItem, Scroller, ScrollerDomType } from './core';\n\nexport const smoothScroll = (\n  dom: ScrollerDomType,\n  config: {\n    lerp?: coreBehaviors.LerpContentConfig,\n    mouse?: coreBehaviors.MouseWheelConfig,\n    touch?: coreBehaviors.TouchInertiaConfig,\n    focus?: coreBehaviors.BypassFocusConfig,\n    styles?: coreBehaviors.StyleContainerConfig['defaults'],\n    keyboard?: coreBehaviors.KeyboardConfig,\n    translate?: coreBehaviors.TranslateConfig,\n    behaviors?: { [name: string]: ScrollBehaviorItem }\n  } = {},\n) => new Scroller(dom, {\n  clampContent: coreBehaviors.clampContent(),\n  tweenTo: coreBehaviors.tweenTo(),\n  scrollTo: coreBehaviors.scrollTo(),\n  bypassFocus: coreBehaviors.bypassFocus(config.focus),\n  styleContainer: coreBehaviors.styleContainer({ defaults: config.styles }),\n  touchInertia: coreBehaviors.touchInertia(config.touch),\n  lerpContent: coreBehaviors.lerpContent(config.lerp),\n  mouseWheel: coreBehaviors.mouseWheel(config.mouse),\n  translate: coreBehaviors.translate(config.translate),\n  keyboard: coreBehaviors.keyboard(config.keyboard),\n  ...(config.behaviors || {})\n});\n\nexport const nativeSmoothScroll = (\n  dom: ScrollerDomType,\n  config: {\n    lerp?: coreBehaviors.LerpContentConfig,\n    focus?: coreBehaviors.BypassFocusConfig,\n    styles?: coreBehaviors.StyleContainerConfig['defaults'],\n    scrollTo?: coreBehaviors.ScrollToConfig,\n    tweenTo?: coreBehaviors.TweenToConfig,\n    translate?: coreBehaviors.TranslateConfig,\n    native?: coreBehaviors.BypassNativeConfig,\n    scrollbar?: coreBehaviors.NativeScrollbarConfig,\n    behaviors?: { [name: string]: ScrollBehaviorItem }\n  } = {}\n) => new Scroller(dom, {\n  clampContent: coreBehaviors.clampContent(),\n  nativeScrollbar: coreBehaviors.nativeScrollbar(config.scrollbar),\n  lerpContent: coreBehaviors.lerpContent(config.lerp),\n  bypassNative: coreBehaviors.bypassNative({\n    condition: () => Browser.mobile,\n    ...config.native\n  }),\n  translate: coreBehaviors.translate(config.translate),\n  tweenTo: coreBehaviors.tweenTo({\n    nativeTarget: Browser.client ? window : undefined,\n    ...config.tweenTo\n  }),\n  scrollTo: coreBehaviors.scrollTo({\n    nativeTarget: Browser.client ? window : undefined,\n    ...config.scrollTo\n  }),\n  bypassFocus: coreBehaviors.bypassFocus({\n    nativeTarget: Browser.client ? window : undefined,\n    ...config.focus\n  }),\n  styleContainer: coreBehaviors.styleContainer({\n    defaults: {\n      position: 'fixed',\n      left: '0px',\n      top: '0px',\n      width: '100%',\n      height: '100%',\n      ...config.styles\n    }\n  }),\n  ...(config.behaviors || {})\n});\n"],"names":["ScrollerDomEvent","ScrollerDom","EventEmitter","[object Object]","config","super","this","dynamic","element","HTMLElement","observer","ElementObserver","container","ElementState","document","createElement","wrapper","observe","changed","emit","RECALC","className","appendChild","async","update","rootElement","children","Array","from","childNodes","append","removeChild","ScrollerEvent","Scroller","dom","behaviors","Map","output","x","y","virtual","name","hasOwnProperty","setBehavior","attach","attached","unlisten","listenCompose","on","updateDelta","Ticker","requestAnimationFrame","DELTA","delta","isLocked","availableBehaviors","forEach","_behavior","key","attachBehavior","detach","attachedBehaviors","call","recalc","behavior","set","has","detachBehavior","delete","get","virtPos","position","TRANSFORM_DELTA","newDelta","updatePosition","isNum","undefined","VIRTUAL","TRANSFORM_VIRTUAL","newPos","isEventMuted","TRANSFORM_OUTPUT","hasEventListeners","updateOutput","pos","step","outPos","OUTPUT","enable","locks","includes","push","unlock","index","indexOf","splice","length","skipOutputTransform","SCROLL_TO","options","TWEEN_TO","cb","scroller","focusTarget","Browser","client","window","ignoreIn","ignoreInside","listenEl","event","preventDefault","scrollLeft","scrollTop","activeEl","target","map","el","contains","bounds","getBoundingClientRect","targetSize","size","top","height","left","right","width","nativeTarget","scrollTo","getDeltaByKeyEvent","arrowDelta","pageDelta","spaceDelta","homeEndDelta","Infinity","defaultConfig","condition","cfg","Object","assign","self","detachedBehaviors","getPos","scrollX","scrollY","check","b","defPos","force","tween","shallowStop","stop","unlistenTween","Tween","fromTo","mutate","duration","easing","complete","setTimeout","wSize","cSize","maxScrollX","Math","max","maxScrollY","clamp","passive","documentElement","eventName","wheelEvent","damping","precision","mobileDamping","thread","ticker","mobile","kill","add","_delta","_time","outputX","lerp","outputY","diffX","abs","diffY","multiplier","multiplierFirefox","wheelDeltaX","deltaX","wheelDeltaY","deltaY","firefox","deltaMode","unmute","muteEvents","nativeBehavior","defaults","overflow","objectDeepMerge","style","deltaMultiplier","velocityDamping","velocityMultiplier","minimumThreshold","doc","startPos","velocity","threshold","lastMove","down","getTouch","targetTouches","touch","pageX","pageY","between","deltaTime","now","firefoxFix","initialStyles","updateTransform","posX","posY","rotate","transform","cutDec","currentTween","nativeKillEvents","contentSpan","parentElement","updateSize","remove","smoothScroll","clampContent","coreBehaviors.clampContent","tweenTo","coreBehaviors.tweenTo","coreBehaviors.scrollTo","bypassFocus","coreBehaviors.bypassFocus","focus","styleContainer","coreBehaviors.styleContainer","styles","touchInertia","coreBehaviors.touchInertia","lerpContent","coreBehaviors.lerpContent","mouseWheel","coreBehaviors.mouseWheel","mouse","translate","coreBehaviors.translate","keyboard","coreBehaviors.keyboard","nativeSmoothScroll","nativeScrollbar","coreBehaviors.nativeScrollbar","scrollbar","bypassNative","coreBehaviors.bypassNative","native"],"mappings":"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"}