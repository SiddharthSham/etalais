import { EventEmitter, EventListenerCb, Unlisten } from '@smoovy/event';
import { TweenOptions } from '@smoovy/tween';
import { Coordinate } from '@smoovy/utils';
import { ScrollerDom, ScrollerDomConfig } from './dom';
export declare type ScrollBehavior<C = any> = (config?: C) => ScrollBehaviorItem;
export declare type ScrollBehaviorItemDetach = (() => void) | void;
export declare type ScrollBehaviorItem<S extends Scroller = Scroller> = (scroller: S) => ScrollBehaviorItemDetach;
export interface ScrollerPosition {
    virtual: Coordinate;
    output: Coordinate;
}
export declare type DeltaTransformCallback = (delta: Coordinate) => Coordinate;
export declare type VirtualTransformCallback = (pos: Coordinate) => Coordinate;
export interface OutputTransformEvent {
    pos: Coordinate;
    step: (pos: Coordinate) => void;
}
export interface TweenToEvent {
    pos: Partial<Coordinate>;
    options: Partial<Pick<TweenOptions<any>, 'duration' | 'easing'> & {
        force: boolean;
    }>;
}
export interface ScrollToEvent {
    pos: Partial<Coordinate>;
    skipOutputTransform: boolean;
}
export declare enum ScrollerEvent {
    DELTA = "delta",
    OUTPUT = "output",
    VIRTUAL = "virtual",
    RECALC = "recalc",
    TWEEN_TO = "tween_to",
    SCROLL_TO = "scroll_to",
    TRANSFORM_DELTA = "~delta",
    TRANSFORM_VIRTUAL = "~virtual",
    TRANSFORM_OUTPUT = "~output"
}
export declare type ScrollerDomType = HTMLElement | ScrollerDomConfig | ScrollerDom;
export declare class Scroller extends EventEmitter {
    private attached;
    private locks;
    private availableBehaviors;
    private attachedBehaviors;
    private unlisten;
    dom: ScrollerDom;
    position: ScrollerPosition;
    constructor(dom: ScrollerDomType, behaviors: {
        [name: string]: ScrollBehaviorItem;
    });
    private attach;
    destroy(): void;
    recalc(async?: boolean): void;
    readonly behaviors: Map<string, ScrollBehaviorItem<Scroller>>;
    setBehavior(name: string, behavior: ScrollBehaviorItem): void;
    deleteBehavior(name: string): boolean;
    attachBehavior(name: string): boolean;
    detachBehavior(name: string): boolean;
    updateDelta<T extends Partial<Coordinate>>(delta: T): void;
    protected updatePosition(virtPos?: Partial<Coordinate>): void;
    protected updateOutput(pos: Coordinate): void;
    lock(name?: string, enable?: boolean): void;
    unlock(name?: string): void;
    isLocked(name?: string): boolean;
    scrollTo(pos: Partial<Coordinate>, skipOutputTransform?: boolean): void;
    tweenTo(pos: Partial<Coordinate>, options?: TweenToEvent['options']): void;
    onVirtual(cb: EventListenerCb<Coordinate>): Unlisten;
    onScroll(cb: EventListenerCb<Coordinate>): Unlisten;
    onDelta(cb: EventListenerCb<Coordinate>): Unlisten;
}
