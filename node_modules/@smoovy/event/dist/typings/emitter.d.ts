import { Unlisten } from './utils';
export declare type EventListenerCb<T = any> = (data: T) => void;
export declare type ListenerCallback<T = any> = (...args: T[]) => void;
export declare class EventEmitter {
    private listeners;
    private emitters;
    private mutedEvents;
    emit<T = any, TC = T>(eventsOrName: {
        [name: string]: T;
    } | string, dataOrCallback?: T | ListenerCallback<TC>, callback?: ListenerCallback<TC>): this;
    on<T>(name: string, cb: EventListenerCb<T>): Unlisten;
    off(name: string, cb: EventListenerCb): void;
    hasEventListeners(name: string): boolean;
    isEventMuted(event: string): boolean;
    muteEvents(...events: (string | boolean)[]): Unlisten;
    unmuteEvents(...events: (string | boolean)[]): void;
    reflectEvents(...emitters: EventEmitter[]): void;
    unreflectEvents(): void;
}
